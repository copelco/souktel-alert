#!/usr/bin/env python
# encoding=utf-8


import unittest
import urllib
import logging

from nose.tools import assert_equals, assert_raises, assert_true, assert_not_equals

from rapidsms.tests.harness import MockRouter
from rapidsms.models import Connection, Contact, Backend
from rapidsms.messages.outgoing import OutgoingMessage

from rclickatell.backend import ClickatellBackend
from rclickatell.models import Message, MessageStatus
from rclickatell.forms import StatusCallbackForm

from django.test import Client
from django.core.urlresolvers import reverse
from datetime import datetime
from group_messaging.models import SendingLog, OutgoingLog

logging.basicConfig(level=logging.DEBUG)
router1 = MockRouter()
backend1 = Backend.objects.create(name='Clickatell')
contact1 = Contact.objects.create(name='Test Contact')
connection1 = Connection.objects.create(contact=contact, backend=backend)


def process_queue_callback(router1, *args, **kwargs):
    return process_queue(router1)

def process_queue(router1):

    # queued messages
    conf = {'user': 'test', 'password': 'abc', 'api_id': '1234'}
    clickatell = ClickatellBackend(name="clickatell", router=router1, **conf)
    message = OutgoingMessage(connection, 'abc')
    data = clickatell._prepare_message(message)
    keys = ('user', 'password', 'api_id', 'to', 'text')
    for key in keys:
        assert_true(key in data)
    assert_equals('abc', data['text'])

def send_message(sender, groups, text, date):
    
    # create message object
    message = SendingLog(sender=sender, text=text, date=date)
    message.save()

    # attach groups
    for group in groups:

        # skip non-active groups
        if not group.active:
                continue
        message.groups.add(group)

        # attach recipients from group
        for recipient in group.recipients.select_related():

            # skip non-active recipients
            if not recipient.active:
                continue

            message.recipients.add(recipient)

            # create to-send messages
            msg = OutgoingLog(sender=sender, identity=recipient.identity, \
                              backend=recipient.backend, text=message.text, \
                              status=OutgoingLog.QUEUED)
            msg.save()
    
